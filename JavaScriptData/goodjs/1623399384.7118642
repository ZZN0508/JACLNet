/**
 * Copyright (c) 2009-2012, Skype Technologies S.A. All rights reserved.
 * Version: 2.0
 */

/**
 * The SKYPE object is the single global object used by Skype Common Library.
 * It contains utility functions for strings, arrays, cookies, preferences, and
 * logging. SKYPE.util, SKYPE.user are namespaces created automatically for
 * and used by the library.
 * @module skype
 * @title  SKYPE Global
 */
if (typeof SKYPE == "undefined") {
    /**
     * The SKYPE global namespace object
     * @class SKYPE
     * @static
     */
    var SKYPE = {};
}

/**
 * Returns the namespace specified and creates it if it doesn't exist
 * <pre>
 * SKYPE.namespace("property.package");
 * SKYPE.namespace("SKYPE.property.package");
 * </pre>
 * Either of the above would create SKYPE.property, then
 * SKYPE.property.package
 *
 * Be careful when naming packages. Reserved words may work in some browsers
 * and not others. For instance, the following will fail in Safari:
 * <pre>
 * SKYPE.namespace("really.long.nested.namespace");
 * </pre>
 * This fails because "long" is a future reserved word in ECMAScript
 *
 * @method namespace
 * @static
 * @param  {String*} arguments 1-n namespaces to create
 * @return {Object}  A reference to the last namespace object created
 */
SKYPE.namespace = function() {
    var a = arguments,
        o = null,
        i, j, d;
    for (i = 0; i < a.length; ++i) {
        d = a[i].split(".");
        o = SKYPE;
        // SKYPE is implied, so it is ignored if it is included
        for (j = (d[0] == "SKYPE") ? 1 : 0; j < d.length; ++j) {
            o[d[j]] = o[d[j]] || {};
            o = o[d[j]];
        }
    }
    return o;
};

/**
 * Uses console.log to output a log message, if the console object is available.
 *
 * @method log
 * @static
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt)
 * @param  {String}  src  The source of the the message (opt)
 * @return {Boolean}      True if the log operation was successful.
 */
SKYPE.__log_enabled = null;
SKYPE.log = function(msg, cat, src) {
    if (SKYPE.__log_enabled === null) {
        SKYPE.__log_enabled = (
        location.host.match(/^(pre|dev).*\.net$/) || document.cookie.indexOf("debug") > -1 || location.search.indexOf("debug") > -1);

        if (!SKYPE.__log_enabled) return;

        SKYPE.__log_type = null;
        if (typeof YAHOO != "undefined" && YAHOO.widget && YAHOO.widget.Logger && YAHOO.widget.Logger.log) SKYPE.__log_type = "yui";
        else if (SKYPE.util.Browser.isGecko && typeof console != "undefined" && typeof console.log != "undefined") SKYPE.__log_type = "firebug";
        else if (SKYPE.util.Browser.isSafari && typeof window.console != "undefined" && typeof window.console.log != "undefined") SKYPE.__log_type = "webkit";
        else if (SKYPE.util.Browser.isOpera && typeof opera == "object" && typeof opera.postError != "undefined") SKYPE.__log_type = "opera";
        else if (typeof console != "undefined" && (typeof console.log == "function" || typeof console.log == "object")) SKYPE.__log_type = "native";
    }
    if (!SKYPE.__log_enabled) return;

    switch (SKYPE.__log_type) {
        // YUI logger
    case "yui":
        return YAHOO.widget.Logger.log(msg, cat, src);
        break;

        // Firefox Firebug
    case "firebug":
        if (cat && (typeof console[cat] != "undefined")) console[cat](msg);
        else console.log((cat ? "[" + cat.toUpperCase() + "] " : "") + msg);
        break;

        // Safari/WebKit JS console
    case "webkit":
        window.console.log((cat ? "[" + cat.toUpperCase() + "] " : "") + msg);
        break;

        // Opera error console
    case "opera":
        opera.postError((cat ? "[" + cat.toUpperCase() + "] " : "") + msg);
        break;

    case "native":
        console.log((cat ? "[" + cat.toUpperCase() + "] " : "") + msg);
    }
};

/**
 * Registers a module with the SKYPE object
 * @method register
 * @static
 * @param {String}   name   the name of the module (event, slider, etc)
 * @param {Function} mainClass a reference to class in the module.  This
 *                           class will be tagged with the version info
 *                           so that it will be possible to identify the
 *                           version that is in use when multiple versions
 *                           have loaded
 * @param {Object}   data     metadata object for the module.  Currently it
 *                           is expected to contain a "version" property
 *                           and a "build" property at minimum.
 */
SKYPE.register = function(name, mainClass, data) {
    var mods = SKYPE.env.modules;
    if (!mods[name]) {
        mods[name] = {
            versions: [],
            builds: []
        };
    }
    var m = mods[name],
        v = data.version,
        b = data.build,
        ls = SKYPE.env.listeners;
    m.name = name;
    m.version = v;
    m.build = b;
    m.versions.push(v);
    m.builds.push(b);
    m.mainClass = mainClass;
    // fire the module load listeners
    for (var i = 0; i < ls.length; i = i + 1) {
        ls[i](m);
    }

    // label the main class
    if (mainClass) {
        mainClass.VERSION = v;
        mainClass.BUILD = b;
    } else {
        SKYPE.log("mainClass is undefined for module " + name, "warn");
    }
};


/**
 * SKYPE.env is used to keep track of what is known about the YUI library and
 * the browsing environment
 * @class SKYPE.env
 * @static
 */
SKYPE.env = SKYPE.env || {

    /**
     * Keeps the version info for all modules that have reported themselves
     * @property modules
     * @type Object[]
     */
    modules: [],

    /**
     * List of functions that should be executed every time a module
     * reports itself.
     * @property listeners
     * @type Function[]
     */
    listeners: []
};

/**
 * Returns the version data for the specified module:
 *    <dl>
 *    <dt>name:</dt>      <dd>The name of the module</dd>
 *    <dt>version:</dt>   <dd>The version in use</dd>
 *    <dt>build:</dt>    <dd>The build number in use</dd>
 *    <dt>versions:</dt>  <dd>All versions that were registered</dd>
 *    <dt>builds:</dt>  <dd>All builds that were registered.</dd>
 *    <dt>mainClass:</dt> <dd>An object that was was stamped with the
 *               current version and build. If
 *               mainClass.VERSION != version or mainClass.BUILD != build,
 *               multiple versions of pieces of the library have been
 *               loaded, potentially causing issues.</dd>
 *     </dl>
 *
 * @method getVersion
 * @static
 * @param {String}  name the name of the module (event, slider, etc)
 * @return {Object} The version info
 */
SKYPE.env.getVersion = function(name) {
    return SKYPE.env.modules[name] || null;
};

SKYPE.namespace("util", "user", "ui");

SKYPE.util.Browser = function() {

    var ua          = navigator.userAgent.toLowerCase(),
        isStrict    = document.compatMode == "CSS1Compat",
        isOpera     = ua.indexOf("opera") > -1,
        isSafari    = /webkit|khtml/.test(ua),
        isIE        = ua.indexOf("msie") > -1,
        isIE7       = ua.indexOf("msie 7") > -1,
        ieVer       = ua.match(/msie (\d+)/i) ? parseInt(ua.match(/msie (\d+)/i)[1]) : 0,
        isGecko     = !isSafari && ua.indexOf("gecko") > -1,
        isBorderBox = isIE && !isStrict,
        isWindows   = (ua.indexOf("windows") != -1 || ua.indexOf("win32") != -1),
        isMac       = (ua.indexOf("macintosh") != -1 || ua.indexOf("mac os x") != -1),
        isLinux     = /x11|linux|freebsd|netbsd/.test(ua);

    var isHtmlVideo = function() {

            var detect      = document.createElement('video') || false,
                htmlVideo   = detect && (typeof detect.canPlayType !== "undefined");

            return(htmlVideo == true);
        }();

    var isHtmlVideoMp4 = function() {

            var detect = document.createElement('video') || false;

            if(isIE) {
                return false;
            }

            var htmlVideoMp4 = detect && (typeof detect.canPlayType !== "undefined") && (detect.canPlayType("video/mp4") === "maybe" || detect.canPlayType("video/mp4") === "probably");

            return(htmlVideoMp4 == true);
        }();

    var isMacOld = function() {

            if(!isMac) {
                return false;
            }

            var required = {
                major: 10,
                middle: 5,
                minor: 8
            };

            var osVersion = ua.match(/mac os x ([._0-9]+)/);

            if(osVersion && osVersion[1]) {

                var ver = osVersion[1].split('_');

                if(ver.length == 1) {
                    ver = osVersion[1].split('.');
                }

                if(ver.length == 1) {
                    return true;
                }

                if(ver[0] < required.major || (ver[0] == required.major && ver[1] < required.middle)) {
                    return true;
                }

                if(ver[0] > required.major || (ver[0] == required.major && ver[1] > required.middle)) {
                    return false;
                }

                if(ver.length == 3) {

                    if(ver[1] == required.middle && ver[2] >= required.minor) {
                        return false;
                    }
                }
                
            } else if(ua.match(/(ipad|iphone)/)) {

                return false;
            }

            return true;
        }();

    return {
        isStrict: isStrict,
        isOpera: isOpera,
        isSafari: isSafari,
        isIE: isIE,
        isIE7: isIE7,
        ieVer: ieVer,
        isGecko: isGecko,
        isBorderBox: isBorderBox,
        isWindows: isWindows,
        isMac: isMac,
        isMacOld: isMacOld,
        isLinux: isLinux,
        isHtmlVideo: isHtmlVideo,
        isHtmlVideoMp4: isHtmlVideoMp4
    };
}();

/**
 * Create html5 elements when browser is MS Internet Explorer and verison is older than 9
 *
 * @name        HtmlFiveSupport
 * @methodOf    SKYPE
 */
SKYPE.HtmlFiveSupport = function() {
    if ($.browser.msie && $.browser.version < 9) {
        var n = ('abbr,article,aside,audio,canvas,datalist,details,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video').split(',');
        for (var i in n) {
            document.createElement(n[i]);
        }
    }
}();

/**
 * Boot loader utility
 *
 * Gives SKYPE core utility to load additional javascript as modules.
 * Note that since version 2.0, there is no more common modules, every require should
 * provide a 'src' attribute for the module.
 *
 * @class   Loader
 * @author  Martin Kapp <martin.kapp@skype.net>
 * @author  Jaanus Post <jaanus.post@skype.net>
 * @version 2.0
 * @site    http://www.skype.com/
 */
SKYPE.env.Loader = (function() {

    // Internal list
    var _required = {},
        modules = {},
        readyCalled = false,
        windowLoaded = false,
        _onloadEvents = [];

    var _prefix = '/';
    if (typeof SKYPE != 'undefined' && SKYPE.settings && SKYPE.settings.assetsPath) {
        _prefix = SKYPE.settings.assetsPath + (SKYPE.settings.assetsPath.substr(-1) == '/' ? '' : '/');
    }

    var _executeLoadEvents = function() {
            // Avoid infinite recursion if an onload function calls ourself
            var onloads = _onloadEvents;
            _onloadEvents = [];

            var l = onloads.length;
            for (var i = 0; i < l; i++) {
                onloads[i]();
            }
        };

    var addLoadEvent = function(func) {
            if (typeof window.onload !== 'function') {
                window.onload = _executeLoadEvents;
            } else if (window.onload !== _executeLoadEvents) {
                // Somebody has overwritten window.onload, add it to queue
                _onloadEvents.push(window.onload);
                window.onload = _executeLoadEvents;
            }

            _onloadEvents.push(func);
        };

    addLoadEvent(function() {
        windowLoaded = true;
    });

    // Load all the SCRIPTS
    var _loadDependencyTree = function(list) {
            if (typeof list == 'undefined') {
                list = _required;
            }

            var ready = [];

            for (var i in list) {
                if (typeof list[i].loaded == 'undefined') {

                    if (typeof list[i].loadcheck != 'undefined') {
                        // Supports functions as conditions, @since 1.0.4
                        if (typeof list[i].loadcheck == 'function' && list[i].loadcheck()) {
                            SKYPE.log('Mod ' + i + ' marked as loaded', 'warn');
                            ready.push(i);
                            continue;
                        } else if (typeof list[i].loadcheck != 'function' && list[i].loadcheck) {
                            SKYPE.log('Mod ' + i + ' marked as loaded', 'warn');
                            ready.push(i);
                            continue;
                        }
                    }

                    if (typeof list[i].requires == 'undefined') {
                        ready.push(i);

                    } else if (typeof list[i].requires == 'object') {

                        var modReady = true;

                        for (var j in list[i].requires) {
                            var mod = list[j];

                            if (typeof mod.loaded == 'undefined' || !mod.loaded) {
                                modReady = false;
                                if (typeof mod.loadcheck != 'undefined') {
                                    // Supports functions as conditions, @since 1.0.4
                                    if (typeof mod.loadcheck == 'function') {
                                        modReady = mod.loadcheck();
                                    } else if (typeof mod.loadcheck != 'function' && mod.loadcheck) {
                                        modReady = true;
                                    }
                                }
                            }
                        }
                        if (modReady) {
                            ready.push(i);
                        }
                    }
                }
            }

            if (ready.length) {
                SKYPE.log('Ready to load ' + ready.toString(), 'info');

                for (var i = 0, len = ready.length; i < len; i++) {
                    list[ready[i]].loaded = false;
                    if (typeof list[ready[i]].loadcheck != 'undefined') {
                        // Supports functions as conditions, @since 1.0.4
                        if (typeof list[ready[i]].loadcheck == 'function') {
                            list[ready[i]].loaded = list[ready[i]].loadcheck();
                            if (list[ready[i]].loaded) {
                                SKYPE.log('Mod already loaded ' + ready[i], 'info');
                                continue;
                            }
                        } else if (typeof list[ready[i]].loadcheck != 'function' && list[ready[i]].loadcheck) {
                            list[ready[i]].loaded = true;
                            SKYPE.log('Mod already loaded ' + ready[i], 'info');
                            continue;
                        }
                    }
                    (function() {
                        var inc = ready[i],
                            prefix = list[inc].prefix || _prefix;
                        params = {
                            'charset': 'utf-8'
                        };

                        if (typeof list[inc].id != 'undefined') {
                            params.id = list[inc].id;
                        }

                        if (typeof list[inc].persistent != 'undefined') {
                            params.persistent = list[inc].persistent;
                        }

                        // @TODO Detect full URLâ€™s to not use prefix
                        _insertScript(prefix + '' + list[inc].src, params, function() {
                            SKYPE.log('Done loading ' + inc, 'info');

                            list[inc].loaded = true;

                            // If init parameters are supplied and module is registered, call init
                            if (list[inc].init) {
                                if (null !== (mod = SKYPE.env.getVersion(inc))) {
                                    if (mod.mainClass && mod.mainClass.init && typeof mod.mainClass.init == 'function') {
                                        SKYPE.log('Calling init on ' + inc, 'info');
                                        mod.mainClass.init(list[inc].init);
                                    }
                                }
                            }

                            _loadDependencyTree();
                        });
                    })();
                }
            }

        },

        // Inserts new SCRIPT tag to the HTML then cleans it up afterwards
        _insertScript = function(url, scriptParams, callback) {
            var head = document.getElementsByTagName("head")[0] || document.documentElement;
            var script = document.createElement("script");
            script.src = url;
            if (scriptParams) {
                for (var i in scriptParams) {
                    script[i] = scriptParams[i];
                }
                // script.charset = scriptCharset;
            }

            // Handle Script loading
            var done = false;

            // Attach handlers for all browsers
            script.onload = script.onreadystatechange = function() {
                if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                    done = true;

                    // Handle memory leak in IE
                    script.onload = script.onreadystatechange = null;
                    var persistent = (scriptParams && typeof scriptParams.persistent != 'undefined') ? scriptParams.persistent : false;
                    if (head && script.parentNode && !persistent) {
                        head.removeChild(script);
                    }

                    if (typeof callback == 'function') {
                        callback();
                    }
                }
            };

            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
            // This arises when a base node is used (#2709 and #4378).
            head.insertBefore(script, head.firstChild);

            // We handle everything using the script element injection
            return undefined;
        };

    /**
     * Load module info
     */
    /** Do not load common modules list in 2.0
    _insertScript( _prefix + 'i/js/skype-common-modules.js?' + (new Date()).getTime(), 'utf-8', function() {
        SKYPE.log( 'Core modules loaded', 'info' );

        var loadCommon = function( name, opts ) {
            if ( opts && typeof opts.condition != 'undefined' && opts.condition == false ) {
                SKYPE.log('Pass mod ' + name + ' â€“ no condition', 'info');
                if ( typeof opts.skiprequired == 'undefined' ) {
                    opts.skiprequired = [];
                }
                return false;
            }


            _required[name] = $.extend( modules[name], opts );

            opts = _required[name];

            // Load module dependencies
            if ( opts && opts.requires ) {
                for ( var i in opts.requires) {
                    var added = loadCommon( i, opts.requires[i] );
                    if ( !added ) {
                        delete opts.requires[i];
                    }
                }
            }

            return true;
        };

        for ( var i in _required ) {
            loadCommon( i, _required[i] );
        }

        modulesLoaded = true;

        if ( readyCalled ) {
            _loadDependencyTree();
        }
    });
    */

    /** Create fake window.onload event */
    SKYPE.domready = function(fn) {
        if (windowLoaded) {
            fn();
        } else {
            addLoadEvent(fn);
        }
    };


    // Expose Loader methods
    return {
        // Add available module info
        addModules: function(coreModules) {
            modules = $.extend({}, modules, coreModules);
        },

        // Function to add required modules
        require: function(module, opts, initParams) {
            if (typeof opts != 'object') {
                opts = {};
            }

            // Check if condition is supplied and is valid
            if (opts && typeof opts.condition != 'undefined') {
                if (!opts.condition) {
                    return false;
                }
            }

            // if ( !modulesLoadedLoaded ) {
            // console.log('!modulesLoaded ', module);
            if (typeof opts == 'object' && opts.src) {
                if (_required[module]) {
                    _required[module] = $.extend(_required[module], opts);
                } else {
                    _required[module] = opts;
                }

            } else if (typeof opts == 'string') {
                _required[module] = {
                    src: opts
                };

            } else {
                SKYPE.log('There was no â€˜srcâ€™ specified for module â€˜' + module + 'â€™. Required since version Loader v2.0', 'warn');
                return false;

            } /* No more preloaded modules list */
            /*
            } else {
                // Add module to the required list
                if ( module in modules ) {
                    _required[module] = modules[module];

                    if ( opts ) {
                        _required[module] = $.extend( _required[module], opts );
                    }

                    opts = _required[module];

                } else if ( opts && opts.src ) {

                    if ( _required[module] ) {
                        _required[module] = $.extend( _required[module], opts );
                    } else {
                        _required[module] = opts;
                    }

                } else if ( !(opts.src) ) {
                    console.log('no source for module ' + module);
                }
            }
            */

            // Check if init needs to be called when done
            if (typeof initParams != 'undefined') {
                if (typeof _required[module].init == 'undefined') {
                    _required[module].init = [];
                }

                _required[module].init.push(initParams);
            }

            // Load module dependencies
            if (opts && opts.requires) {
                for (var i in opts.requires) {
                    var added = this.require(i, opts.requires[i]);
                    if (!added) {
                        delete opts.requires[i];
                    }
                }
            }

            return true;
        },

        // Function that loads required javascripts
        ready: function() {
            SKYPE.register("loader", SKYPE.env.Loader, {
                version: "2.0",
                build: "1"
            });

            readyCalled = true;

            _loadDependencyTree();
        },

        load: function(script, charset, callback) {
            _insertScript(script, charset, callback);
        },

        windowLoad: function(fn) {
            SKYPE.domready(fn);
        }
    };

})();

/* Settings */

/* @legal: Cookie handling code from the book "JavaScript: The Definitive Guide" by David Flanagan published by O'Reilly. ISBN: 0-596-00048-0 */
SKYPE.util.Cookie = function(document, name, hours, path, domain, secure, fieldsep, valuesep) {
    this.document = document;
    this.name = name;
    if (hours) {
        this.expiration = new Date((new Date()).getTime() + hours * 6 * 3600000);
    } else {
        this.expiration = null;
    }
    this.path = path ? path : null;
    this.domain = domain ? domain : null;
    this.secure = secure ? true : false;
    this.fieldsep = fieldsep ? fieldsep : ':';
    this.valuesep = valuesep ? valuesep : '&';
    this.isSimpleValue = false;
    // Actual cookie data is held in this one
    this.data = {};
};
SKYPE.util.Cookie.prototype = {
    /**
     * Saves values set in cookie.
     */
    store: function(doSort) {
        var cookieval = "";
        var cookie = "";
        var keys = [];
        if (typeof this.data == "object") {
            for (var prop in this.data) {
                keys.push(prop);
            }
            if (doSort) keys.sort();
            for (var i = 0; i < keys.length; i++) {
                if (cookieval != "") cookieval += this.fieldsep;
                cookieval += keys[i] + this.valuesep + escape(this.data[keys[i]]);
            }
        } else {
            cookieval = escape(this.data.toString());
        }
        cookie = this.name + '=' + cookieval;
        if (this.expiration) cookie += '; expires=' + this.expiration.toGMTString();
        if (this.path) cookie += '; path=' + this.path;
        if (this.domain) cookie += '; domain=' + this.domain;
        if (this.secure) cookie += '; secure';
        this.document.cookie = cookie;
    },

    /**
     * Loads values from cookie
     */
    load: function() {
        if (this.isSimpleValue && typeof this.data != "string") this.data = this.data.toString();
        var allcookies = this.document.cookie;
        if (allcookies == "") return false;
        var start = allcookies.indexOf(this.name + '=');
        if (start == -1) return false;
        start += this.name.length + 1;
        var end = allcookies.indexOf(';', start);
        if (end == -1) end = allcookies.length;
        var cookieval = allcookies.substring(start, end);
        if (!this.isSimpleValue) {
            var a = cookieval.split(this.fieldsep);
            for (var i = 0; i < a.length; i++)
            a[i] = a[i].split(this.valuesep);
            for (var i = 0; i < a.length; i++)
            this.data[a[i][0]] = unescape(a[i][1]);
        } else {
            this.data = cookieval;
        }
        return true;
    },

    /**
     * Removes cookie if it was set.
     */
    remove: function() {
        var cookie = this.name + '=';
        if (this.path) cookie += '; path=' + this.path;
        if (this.domain) cookie += '; domain=' + this.domain;
        cookie += '; expires=Fri, 02-Jan-1970 00:00:00 GMT';
        this.document.cookie = cookie;
    }
};

/**
 * Skype Preference Cookie Handling
 */
SKYPE.user.Preferences = function() {
    var values = {
        'LC': '',
        'CCY': '',
        'CC': '',
        'TZ': '',
        'VER': '',
        'TS': '',
        'TM': '',
        'VAT': '',
        'UCP': '',
        'ENV': ''
    };

    var domain = null;
    var cookieName = "SC";
    var cookie = null;
    var path = "/";
    var secure = false;
    var expires = null;
    var _parsing = false;

    var platformNames = {
        '0': 'windows',
        '1': 'pocketpc',
        '2': 'linux',
        '3': 'osx'
    };

    return {
        init: function() {
            this.setDomain();
            expires = 365;
            this.parseCookie();
        },
        getCookie: function() {
            var c = new SKYPE.util.Cookie(document, cookieName, expires, path, domain, secure, ":", "=");
            c.load();
            return c;
        },
        scrubCookieValue: function(value) {
            return value.replace(/[\n\r]/g, "").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        setDomain: function(dom) {
            if (dom) {
                domain = dom;
            } else if (location && location.hostname) {
                var parts = location.hostname.split(".");
                var i = parts.length;
                if (i >= 2 && isNaN(parseInt(parts[i - 1]))) {
                    domain = "." + parts[i - 2] + "." + parts[i - 1];
                }
            }
        },
        parseCookie: function() {
            cookie = this.getCookie();
            var knownSetters = {
                'LC': 'setLanguage',
                'CCY': 'setCurrency',
                'CC': 'setCountryCode',
                'TZ': 'setTimezone',
                'VER': 'setVersion',
                'TS': 'setTimeStamp',
                'TM': 'setTimeModified',
                'VAT': 'setVatEligible',
                'UCP': 'setClientProfile'
            };
            _parsing = true;
            for (var prop in cookie.data) {
                if (prop.search(/[A-Z]+/) != -1) {
                    if (knownSetters[prop]) this[knownSetters[prop]](cookie.data[prop]);
                    else this.setValue(prop, cookie.data[prop]);
                }
            }
            _parsing = false;
            return true;
        },

        save: function() {
            for (var val in values) {
                cookie.data[val] = values[val];
            }
            cookie.store(true);
        },

        clear: function() {
            cookie.remove();
        },

        getValue: function(key, def) {
            if (typeof def == "undefined") def = "";
            if (values[key] && values[key] != null && values[key].length) return values[key];
            return def;
        },
        setValue: function(key, value) {
            values[key] = value.toString();
        },

        touchCookie: function() {

            var now = parseInt(new Date().getTime() / 1000);
            if (_parsing) return false;
            if (!this.getTimeStamp().length) this.setValue("TS", now);
            this.setValue("TM", now);
            return true;
        },

        setLanguage: function(value) { /* TODO: Should do validation here before setting? */
            this.setValue("LC", value.replace(/_/g, "-"));
            this.touchCookie();
            return true;
        },
        getLanguage: function(def) {
            return this.getValue("LC", def);
        },

        setCurrency: function(value) {
            if (/^([A-Z]{3}|[0-9]{3})$/.test(value) == false) value = "";
            this.setValue("CCY", value);
            this.touchCookie();
            return true;
        },
        getCurrency: function(def) {
            return this.getValue("CCY", def);
        },

        setCountryCode: function(value) {
            if (/^([A-Z]{2,3}|[0-9]{3})$/.test(value) == false) value = "";
            this.setValue("CC", value);
            this.touchCookie();
            return true;
        },
        getCountryCode: function(def) {
            return this.getValue("CC", def);
        },

        formatDecimal: function(value) {
            if (value < 10) return "0" + value;
            return value;
        },

        setTimezone: function(value) {
            if (/^([-+]((0[0-9]|1[0-3]):[0-5][0-9]|14:00)|Z)$/.test(value) == false) {
                var matches = value.match(/^([-+]?)([0-9]{1,2})(\.[0-9])?$/);
                if (matches) {
                    var sign = matches[1] && matches[1].length ? matches[1] : '+';
                    var hours = parseInt(matches[2]);
                    var minutes = matches[3] && matches[3].length ? parseInt(60 * parseFloat(matches[3])) : 0;
                    if (hours > 14) hours = 14;
                    if (hours == 14) minutes = 0;
                    if (minutes > 59) minutes = 0;
                    value = sign + this.formatDecimal(hours) + ":" + this.formatDecimal(minutes);
                }
            }
            this.setValue("TZ", value);
            this.touchCookie();
            return true;
        },
        getTimezone: function(def) {
            return this.getValue("TZ", def);
        },

        setVersion: function(value) {

            if (typeof value == "object") {
                var defaultValues = {
                    'platform': '',
                    'platformname': '',
                    'version': '',
                    'campaign': '',
                    'partner': '',
                    'partnername': ''
                };
                for (var prop in defaultValues) {
                    if (value[prop] == null) value[prop] = defaultValues[prop];
                }
                var splitVer = value.version.split(".");

                value = value.platform + "/" + splitVer[0] + "." + splitVer[1] + "." + (value.partner.length ? value.partner : splitVer[2]) + "." + splitVer[3] + "/" + value.campaign;
            }

            if (/^[0-9]?\/[0-9]{1,2}(\.[0-9]{1,5}){3}\/[0-9]*$/.test(value) == false) return false;

            this.setValue("VER", value);
            this.touchCookie();
            this.save();
            return true;
        },
        getVersion: function(def) {
            return this.getValue("VER", def);
        },
        getParsedVersion: function(def) {
            var result = {
                'platform': '',
                'platformname': '',
                'version': '',
                'campaign': '',
                'partner': '',
                'partnername': ''
            };
            var ver = this.getVersion(def);
            if (!ver.length) return result;
            var splitVer = ver.split("/");
            result.platform = splitVer[0];
            result.version = splitVer[1];
            result.campaign = splitVer[2];
            splitVer = result.version.split(".");
            result.partner = (splitVer.length > 2 && splitVer[2]) ? splitVer[2] : 0;
            return result;
        },

        setTimeStamp: function(value) {
            this.setValue("TS", value);
            this.touchCookie();
        },
        getTimeStamp: function(def) {
            return parseInt(this.getValue("TS", def));
        },

        setTimeModified: function(value) {
            if (_parsing) {
                this.setValue("TM", value);
            }
            this.touchCookie();
        },
        getTimeModified: function(def) {
            return parseInt(this.getValue("TM", def));
        },

        setClientProfile: function(value) {
            this.setValue("UCP", value);
            this.touchCookie();
        },
        getClientProfile: function(def) {
            return this.getValue("UCP", def);
        },

        setVatEligible: function(value) {
            var result = "";
            // If string was passed in, then only accept "true" and "false" as valid
            if (typeof value == "string") {
                if (value == "true") result = "true";
                else if (value == "false") result = "false";
                else result = "";
            }
            // Turn booleans into strings
            else if (typeof value == "boolean") {
                result = value ? "true" : "false";
            }
            // Accept only numbers 0 and 1, nothing else
            else if (typeof value == "number") {
                if (value == 1) result = "true";
                else if (value == 0) result = "false";
                else result = "";
            }
            this.setValue("VAT", result);
            this.touchCookie();
        },
        isVatEligible: function() {
            var val = this.getValue("VAT");
            if (val == "true") return true;
            else if (val == "false") return false;
            else return null;
        },

        setEnv: function(value) {
            value = value.replace(/\//g, "-");

            if (!this.getEnv(value)) {
                var env = this.getValue("ENV");
                env = env.length ? env.split("/") : [];
                env.push(value);
                this.setValue("ENV", env.join("/"));
                this.touchCookie();
            }
        },
        getEnv: function(value) {
            value = value.replace(/\//g, "-");

            var env = this.getValue("ENV").split("/");
            for (var i = 0; i < env.length; i++) {
                if (env[i] === value) return true;
            }
            return false;
        },
        deleteEnv: function(value) {
            var env = this.getValue("ENV").split("/");
            for (var i = 0; i < env.length; i++) {
                if (env[i] === value) {
                    env.splice(i, 1);
                }
            };
            this.setValue("ENV", env.join("/"));
            this.touchCookie();
        },
        clearEnv: function() {
            this.setValue("ENV", "");
            this.touchCookie();
        },

        debug: function() {
            var result = "";
            for (var key in values) {
                result = result + key + " = " + values[key] + "\n";
            }
            return result;
        }
    };
}();
SKYPE.user.Preferences.init();


/**
 * Site tweaks
 *
 * Written as lib independent to reduce overhead of functionality thatâ€™s needed on every page
 */
SKYPE.ui.SiteTweaks = function() {

    var inputTweaks = function() {
            // Input tweaks
            // Added a hack so this would work for Web reg too
            var header = document.getElementById('header');
            if (!header) {
                return false;
            }

            var inputs = header.getElementsByTagName('input'),
                i = inputs.length;

            while (i--) {
                if (inputs[i].title && inputs[i].type == 'text') {
                    inputs[i].onfocus = function() {
                        if (this.value === this.title) {
                            this.value = '';
                        }
                    };
                    inputs[i].onblur = function() {
                        if (this.value === '' || this.value === this.title) {
                            this.value = this.title;
                        }
                    };

                    if (inputs[i].value === '' || inputs[i].value === inputs[i].title) {
                        inputs[i].value = inputs[i].title;
                    }
                }
            }
        },

        languageSelector = function() {

            $('.userLanguage').on('change', function(e) {

                var $form = $(this).closest('form'),
                    url = $form.attr('action'),
                    languageCode = this.options[this.selectedIndex].value,
                    urlSearch = location.search,
                    name = this.name,
                    pattern = new RegExp('([?&])' + name + '=([^&]*)');

                if ($form.attr('method') === 'get') {

                    if (url.search('\\${LC}') !== -1) {
                        location.href = url.replace('${LC}', languageCode);
                    } else if (url.match(pattern)) {
                        location.href = url.replace(pattern, '$1' + name + '=' + languageCode);
                    } else {
                        location.href = url + (url.match(/\?/) ? '&' : '?') + name + '=' + languageCode;
                    }

                } else {
                    $form.submit();
                }
            });

            $('.userLanguage').
            on('focus', function(e) {
                $('.languagesDropdown').addClass('open');
            }).
            on('blur', function(e) {
                $('.languagesDropdown').removeClass('open');
            });

        };

    SKYPE.domready(function() {
        inputTweaks();
        languageSelector();
    });

    /*
    SKYPE.env.listeners.push(function( mod ) {
        if ( mod.name != 'loader' ) {
            return;
        }

        inputTweaks();
        languageSelector();
    });
    */
}();

/*
{
    'nav': {
        content: 'Uus sisu',
        visible: true
    },
    'footer': {
        content: 'Uus',
        visible: false,
        animation: 'fade'
    },
    'shorthand': "New string is cool",
    callback: function() {
        alert('woot');
    }
}
*/
SKYPE.ui.updateContent = function(object) {

    if (typeof object == 'undefined') return;

    for (var key in object) {
        if (!object.hasOwnProperty(key)) continue;

        $('[data-content-key=' + key + ']').each(function(i, el) {
            if (typeof object[key] === 'string') {
                $(el).text(object[key]);
                return;
            } else if (typeof object[key].content != 'undefined') {
                $(el).text(object[key].content);
            }

            if (typeof object[key].visible != 'undefined') {
                if (object[key].visible) {
                    $(el).show(object[key].animation ? object[key].animation : null);
                } else {
                    $(el).hide(object[key].animation ? object[key].animation : null);
                }
            }
        });
    }

    if (typeof object.callbackFn == 'function') {
        object.callbackFn();
    }

};

/**
 * Load CSS dynamically
 */
SKYPE.loadCss = function(filename) {
    var fileref = document.createElement("link");
    fileref.setAttribute("rel", "stylesheet");
    fileref.setAttribute("type", "text/css");
    fileref.setAttribute("href", filename);
    if (typeof fileref != "undefined") {
        document.getElementsByTagName("head")[0].appendChild(fileref);
    }
};

/**
 *  * Load some html content and insert inside specific element
 *
 * @method loadContent
 * @static
 * @param  {String}  ajaxUrl  The url content will be loaded from
 * @param  {String}  elementId  The selector of element, where content will be put in
 * @param  {Array}  parameters  Parameters, that will be appended to the url (opt) (ex: ["param1Name=value1", "param2Name=value2"])
 * @param  {Function}  callback  The function executed after content is loaded (optional)
 */
SKYPE.loadContent = function(ajaxUrl, elementId, parameters, callback) {
    var newParameters = new Array();

    $.each(
    parameters, function(intIndex, objValue) {
        var paramKey = objValue.split(/_/)[0];
        var paramValue = objValue.split(/_/)[1];
        var index = ajaxUrl.search(paramKey + "_");
        if (index > 0) {
            var startUrl = ajaxUrl.substring(0, index);
            var endUrl = ajaxUrl.substring(index + objValue.length);
            var endUrlIndex = ajaxUrl.substring(index + objValue.length).search(/\./);
            endUrl = endUrl.substring(endUrlIndex);
            ajaxUrl = startUrl + objValue + endUrl;
        } else {
            newParameters.push(objValue);
        }
    });
    var urlString = ajaxUrl;
    if (newParameters.length > 0) {
        urlString = ajaxUrl.replace(/\/$/g, "." + newParameters.join(".") + "/");
        urlString = urlString.replace(/\.html$/g, "." + newParameters.join(".") + ".html");
    }
    $.ajax({
        url: urlString,
        success: function(response) {
            $(elementId).html(response);
            if (callback) {
                callback();
            }
        }
    });
};


/**
 * Global responsive state holder
 */
SKYPE.CurrentResponsiveState = 'desktop';

/**
 * Listens window resize and triggers responsiveStateChange event when state is changed
 *
 * @name        ResponsiveState
 * @methodOf    SKYPE
 */
SKYPE.ResponsiveState = function() {
    /**
     * Based on DOM elements calculates current state and returns value
     *
     * @name        calculateCurrentState
     * @methodOf    SKYPE.ResponsiveState
     * @returns     {string} - current state name: desktop (default), tablet, mobile
     */
    var _calculateCurrentState = function() {
            var $desktop = $('<span class="isDesktop"></span>'),
                $tablet = $('<span class="isTablet"></span>'),
                $mobile = $('<span class="isMobile"></span>'),
                _remove = function() {
                    $desktop.remove();
                    $tablet.remove();
                    $mobile.remove();
                };

            if (!($('.isDesktop').length && $('.isTablet').length && $('.isMobile').length)) {
                $('body').append($desktop, $tablet, $mobile);
            }

            if ($('.isTablet').is(':visible')) {
                _remove();
                return 'tablet';
            } else if ($('.isMobile').is(':visible')) {
                _remove();
                return 'mobile';
            } else {
                _remove();
                return 'desktop';
            }
        },

        /**
         * Initial function that checks current responsive state and sets value to SKYPE.CurrentResponsiveState. Also creates event 'responsiveStateChange' when state changes on resize. <br />
         * Usage of event 'responsiveStateChange':<br />
         *
         * <code>
         * $(window).on('responsiveStateChange',function(event){
         *     // event.state returns current state value as a string
         *     var currentState = event.state;
         *
         *     // event.size includes height and width of window
         *     var currentHeight = event.size.height,
         *         currentWidth = event.size.width;
         * });
         * </code>
         *
         * @name        init
         * @methodOf    SKYPE.ResponsiveState
         */
        _init = function() {
            $(window).on('resize', function() {
                if (this.resizeTo) {
                    clearTimeout(this.resizeTo);
                }

                this.resizeTo = setTimeout(function() {
                    var oldState = SKYPE.CurrentResponsiveState,
                        newState = _calculateCurrentState();

                    if (oldState != newState) {
                        $(window).trigger({
                            type: 'responsiveStateChange',
                            state: newState,
                            size: {
                                width: $(window).width(),
                                height: $(window).height()
                            }
                        });

                        SKYPE.CurrentResponsiveState = newState;
                    }
                }, 100);
            });

            SKYPE.CurrentResponsiveState = _calculateCurrentState();
        };

    return {
        calculateCurrentState: function() {
            return _calculateCurrentState();
        },
        init: function() {
            return _init();
        }
    };
}();

/**
 * Replaces the browser native link to anchor movement with animated scroll
 *
 * @name        smoothlyScrollTo
 * @methodOf    SKYPE
 * @todo        Remove exception for features, perhaps use 'body' and '#elementId' as targets
 */
SKYPE.smoothlyScrollTo = function() {

    var _smoothlyScrollTo = function(destination, target) {

            if (typeof destination === 'undefined') return;

            var $viewport = $('html, body');

            if (SKYPE.CurrentResponsiveState == 'mobile') {
                $viewport.animate({
                    scrollTop: destination
                }, 1800, 'easeInOutQuint');
            } else {
                $viewport.animate({
                    scrollTop: destination
                }, 1800, 'easeInOutQuint');
            }

            $viewport.bind("scroll mousedown DOMMouseScroll mousewheel keyup", function(e){
                if ( e.which > 0 || e.type === "mousedown" || e.type === "mousewheel"){
                     $viewport.stop().unbind('scroll mousedown DOMMouseScroll mousewheel keyup');
                }
            });     
        },

        _init = function() {
            var destination;

            $('a.smoothlyScrollTo').on('click', function(e) {

                e.preventDefault();

                var $target = $(this).attr('href');

                if ($target === '#') {

                    destination = 0;

                } else if ($target === '#featuresAnchor') {

                    if (SKYPE.CurrentResponsiveState == 'mobile') {

                        destination = 0;

                    } else {

                        destination = $($target).offset().top - 26;

                    }

                } else if ($target === '#calling' || $target === '#video' || $target === '#messaging' || $target === '#sharing' || $target === '#more') {

                    if (SKYPE.CurrentResponsiveState == 'mobile') {

                        destination = $($target).offset().top + 1;

                    } else {

                        destination = $($target).offset().top - 18;

                    }

                } else {

                    destination = $($target).offset().top;
                }

                _smoothlyScrollTo(destination, $target);
            });
        };

    return {
        destination: function(destination) {
            return _smoothlyScrollTo();
        },
        init: function() {
            return _init();
        }
    };

}();



/**
 * Replaces the browser native link to anchor movement with animated scroll
 *
 * @name        smoothlyScrollToOffset
 * @methodOf    SKYPE
 * @todo        Remove exception for features, perhaps use 'body' and '#elementId' as targets
 */
SKYPE.smoothlyScrollToOffset = function() {

    var _smoothlyScrollToOffset = function(destination, target) {

            if (typeof destination === 'undefined') return;

            $('html, body').animate({

                scrollTop: destination - 20

            }, 1800, 'easeInOutQuint');
        },

        _init = function() {
            var destination;

            $('a.smoothlyScrollToOffset').on('click', function(e) {

                e.preventDefault();

                var $target = $(this).attr('href');

                if ($(this).closest('.component').has('.featuresBlock') && $('.featuresIndex').length > 0 && !$(this).parent().hasClass('featuresIndex')) {

                    destination = $('.featuresIndex').offset().top;

                } else {

                    if ($target === '#') {

                        destination = 0;

                    } else {

                        destination = ($($target).offset().top)-52;
                    }
                }

                _smoothlyScrollToOffset(destination, $target);
            });
        };

    return {
        destination: function(destination) {
            return _smoothlyScrollToOffset();
        },
        init: function() {
            return _init();
        }
    };

}();

/**
 * Makes an element with class .clickable to handle click on it
 * When element is clicked - it triggers click on a link
 * if element attrubute data-target-link-id specified, then link with such id is used
 * otherwise first child 'a' element is used
 *
 * @name        Clickable
 * @methodOf    SKYPE
 */

SKYPE.Clickable = function() {
    var _init = function(){
        $('.clickable,.clickableInMobile').on('click', function(event) {
            
            if ($(this).is(".clickableInMobile") && (SKYPE.CurrentResponsiveState !== 'mobile')) {
                return;
            }

            if ($(event.target).is('a')) {
                return;
            }

            var el = $(this),
                targetLink,
                url,
                targetClassName = el.attr('data-target-link-id');

            if (targetClassName) {
                targetLink = el.find('#' + targetClassName);
            } else {
                targetLink = el.find('a').first();
            }

            if (targetLink.length) {
                targetLink.trigger('click');
                if ((url = targetLink.attr('href')) && (url != '#')) {
                    document.location.href = url;
                }
            }
        });
        $('.clickable').css('cursor', 'pointer');
    };


    return {
        init: function() {
            return _init();
        }
    };
}();


SKYPE.Overlay = function() {

    var _overlay = {

        adjust: function() {
            if (!$('.overlayMessage:visible').length) return;

            var bodyHeight = $('body').height(),
                scroll = $(window).scrollTop(),
                viewportHeight = (typeof window.innerHeight != 'undefined') ? window.innerHeight : document.documentElement.clientHeight,
                $msg = $('.overlayMessage:visible');


            $msg.css({
                'top': Math.max(100, scroll + viewportHeight / 2 - $msg.outerHeight(true) / 2)
            });

            $('#overlayBg').css('height', Math.max($(window).height(), $(document).height()));
        },

        show: function($el) {

            $('a,label,input,select').addClass('overlayHiddenContent');
            $('a,label,input,select', '.overlayMessage').removeClass('overlayHiddenContent');

            var $overlayBg = (!$('#overlayBg').length) ? $('<div>').attr('id', 'overlayBg').appendTo('body') : $('#overlayBg'),
                $overlayMessage = $('#' + $el.attr('data-id')),
                _show = function() {
                    $overlayBg.fadeIn(100, function() {
                        $overlayMessage.css({
                            'display': 'block',
                            'opacity': 0
                        });

                        _overlay.adjust();

                        $overlayMessage.animate({
                            'opacity': 1
                        }, 200);
                    });
                };

            /* Close overlay with escape when it has close button */
            if ($overlayMessage.find('a.closeButton').length) {
                $(document).bind('keyup.overlay', function(event) {
                    if (event.keyCode == 27) {
                        _overlay.close();
                    }
                });
            } else {
                $(document).unbind('keyup.overlay');
            }

            if ($overlayMessage.length) {
                if ($('.overlayMessage:visible').length) {
                    $('.overlayMessage:visible').fadeOut(100, function() {
                        _show();
                    });
                } else {
                    _show();
                }
            } else {
                window.location = $el.attr('href');
            }
        },
        close: function() {
            $(document).unbind('keyup.overlay');
            $('.overlayHiddenContent').removeClass('overlayHiddenContent');
            $('.overlayMessage,#overlayBg').fadeOut(200);
        }
    };

    return {
        adjust: function() {
            _overlay.adjust();
        },
        show: function($el) {
            _overlay.show($el);
        },
        close: function() {
            _overlay.close();
        }
    };
}();

SKYPE.detectionHandler = function(skypeFound) {

    if (!skypeFound) return false;

    var detection = SkypeDetection.getInstance(),
        platform = detection.getPlatform(),
        platformId = null,
        version = detection.getVersion();

    switch (platform) {
        case 'windows': 
            platformId = 0;
            break;
        case 'macosx': 
            platformId = 3;
            break;
        case 'mac': 
            platformId = 3;
            break;
        case 'linux': 
            platformId = 2;
            break;
        default: 
            platformId = 0;
    }

    var skypeVersion = platformId + '/' + version + '/';

    SKYPE.user.Preferences.setVersion(skypeVersion);
};

$(document).ready(function() {
    $.extend($.easing,
        {
            easeInOutQuint: function (x, t, b, c, d) {
                if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
                return c/2*((t-=2)*t*t*t*t + 2) + b;
            }
        });


    SKYPE.ResponsiveState.init();
    SKYPE.smoothlyScrollTo.init();
    SKYPE.smoothlyScrollToOffset.init();
    SKYPE.Clickable.init();

    if (typeof SkypeDetection !== 'undefined') {

        if (typeof SkypeDetection.loadDetection === 'function') {
            
            SkypeDetection.loadDetection("SKYPE.detectionHandler");
        }
    }

    // Overlay listeners
    $(document).on('click', 'a.overlay', function(event) {
        event.preventDefault();

        SKYPE.Overlay.show($(this));
    });

    $(document).on('click', '.overlayMessage .close, .overlayMessage .closeButton', function(event) {
        event.preventDefault();

        SKYPE.Overlay.close();
    });

    $(window).on('resize', function() {
        SKYPE.Overlay.adjust();
    });
});